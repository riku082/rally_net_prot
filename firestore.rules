rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 開発環境用 - すべてのコレクションへのアクセスを完全許可
    // 警告: 本番環境では必ず適切なセキュリティルールに変更してください
    // 更新日時: 2024-08-27
    
    // すべてのドキュメントへのアクセスを無条件で許可
    match /{document=**} {
      allow read, write: if true;
    }
    
    // 以下は本番用のルール（現在は無効）
    /*
    // バドミントンアプリケーション用セキュリティルール
    // 段階的セキュリティ強化: Phase 1 - 基本認証 + 所有者ベースアクセス
    
    // === 基本セキュリティ関数 ===
    
    // 認証済みユーザーかチェック
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // メール認証済みユーザーかチェック
    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    // ユーザー自身のデータかチェック
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // リソースが存在し、所有者かチェック
    function isResourceOwner() {
      return isAuthenticated() && 
             resource != null && 
             resource.data.userId == request.auth.uid;
    }
    
    // 新規作成データの所有者かチェック
    function isNewResourceOwner() {
      return isAuthenticated() && 
             request.resource.data.userId == request.auth.uid;
    }
    
    // フレンド関係をチェック（シンプル版）
    function isFriend(userId) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/friendships/$(request.auth.uid + '_' + userId)) ||
        exists(/databases/$(database)/documents/friendships/$(userId + '_' + request.auth.uid))
      );
    }
    
    // 基本的なデータバリデーション
    function isValidString(str, minLen, maxLen) {
      return str is string && 
             str.size() >= minLen && 
             str.size() <= maxLen;
    }
    
    // === ユーザー関連データ ===
    
    // ユーザープロフィール
    match /users/{userId} {
      // 読み取り: 認証済みユーザーは基本情報を閲覧可能
      allow read: if isAuthenticated();
      
      // 書き込み: 自分のデータのみ
      allow write: if isOwner(userId);
      
      // サブコレクション: 利用規約同意
      match /agreements/{agreementId} {
        allow read, write: if isOwner(userId);
      }
      
      // サブコレクション: 試合データ
      match /matches/{matchId} {
        allow read, write: if isOwner(userId);
      }
      
      // サブコレクション: ショットデータ
      match /shots/{shotId} {
        allow read, write: if isOwner(userId);
      }
      
      // サブコレクション: 練習記録
      match /practices/{practiceId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // === 練習関連データ ===
    
    // 練習記録
    match /practices/{practiceId} {
      // 読み取り: 認証済みユーザーなら誰でも（コミュニティイベントとの連携のため）
      allow read: if isAuthenticated();
      allow create: if isNewResourceOwner() && 
                       request.resource.data.keys().hasAll(['userId', 'date', 'title']);
      allow update: if isResourceOwner();
      allow delete: if isResourceOwner();
    }
    
    // 練習統計
    match /practiceStats/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // 練習カード
    match /practiceCards/{cardId} {
      // 読み取り: 自分のカードまたは公開カード（認証済みユーザーは閲覧可能）
      allow read: if isAuthenticated() && (
        isResourceOwner() ||
        (resource != null && resource.data.get('isPublic', false) == true)
      );
      
      // 作成・更新・削除: メール認証済みユーザーのみ
      allow create: if isEmailVerified() && 
                       isNewResourceOwner() && 
                       isValidString(request.resource.data.title, 1, 100) &&
                       request.resource.data.difficulty in ['beginner', 'intermediate', 'advanced'];
      allow update: if isEmailVerified() && isResourceOwner();
      allow delete: if isEmailVerified() && isResourceOwner();
    }
    
    // === MBTI診断結果 ===
    
    match /mbtiResults/{resultId} {
      // 開発環境では一時的に全アクセス許可
      allow read, write: if true;
      
      // 本番環境用のルール（コメントアウト）
      // allow read: if isAuthenticated() && 
      //                resource != null && 
      //                resource.data.userId == request.auth.uid;
      // allow create: if isAuthenticated() && 
      //                  request.resource.data.userId == request.auth.uid;
      // allow update: if isAuthenticated() && 
      //                  resource != null && 
      //                  resource.data.userId == request.auth.uid;
      // allow delete: if isAuthenticated() && 
      //                  resource != null && 
      //                  resource.data.userId == request.auth.uid;
    }
    
    // ユーザープロフィール（users コレクションとは別）
    match /userProfiles/{userId} {
      // 開発環境では一時的に全アクセス許可
      allow read, write: if true;
      
      // 本番環境用のルール（コメントアウト）
      // allow read: if isAuthenticated() && (
      //   isOwner(userId) || 
      //   (resource != null && resource.data.get('privacySettings', {}).get('profilePublic', false) == true)
      // );
      // allow write: if isOwner(userId);
    }
    
    // === フレンド機能 ===
    
    // フレンドシップ
    match /friendships/{friendshipId} {
      // 読み取り: 認証済みユーザーは関連データを閲覧可能
      allow read: if isAuthenticated() && 
                     resource != null && (
                       request.auth.uid == resource.data.fromUserId || 
                       request.auth.uid == resource.data.toUserId
                     );
      
      // 作成・更新・削除: メール認証済みユーザーのみ
      allow create: if isEmailVerified() && 
                       request.auth.uid == request.resource.data.fromUserId &&
                       request.resource.data.fromUserId != request.resource.data.toUserId;
      
      allow update: if isEmailVerified() && 
                       resource != null && (
                         request.auth.uid == resource.data.fromUserId || 
                         request.auth.uid == resource.data.toUserId
                       );
      
      allow delete: if isEmailVerified() && 
                       resource != null && (
                         request.auth.uid == resource.data.fromUserId || 
                         request.auth.uid == resource.data.toUserId
                       );
    }
    
    // フレンドリクエスト
    match /friendRequests/{requestId} {
      // 読み取り: 認証済みユーザーは関連データを閲覧可能
      allow read: if isAuthenticated() && 
                     resource != null && (
                       request.auth.uid == resource.data.fromUserId || 
                       request.auth.uid == resource.data.toUserId
                     );
      
      // 作成・更新・削除: メール認証済みユーザーのみ
      allow create: if isEmailVerified() && 
                       request.auth.uid == request.resource.data.fromUserId &&
                       request.resource.data.fromUserId != request.resource.data.toUserId;
      
      allow update: if isEmailVerified() && 
                       resource != null && 
                       request.auth.uid == resource.data.toUserId;
      
      allow delete: if isEmailVerified() && 
                       resource != null && (
                         request.auth.uid == resource.data.fromUserId || 
                         request.auth.uid == resource.data.toUserId
                       );
    }
    
    // === アプリケーション機能 ===
    
    // 試合記録
    match /matches/{matchId} {
      // 読み取り: 認証済みユーザーは自分のデータを閲覧可能
      allow read: if isResourceOwner();
      // 作成・更新・削除: メール認証済みユーザーのみ
      allow create: if isEmailVerified() && isNewResourceOwner();
      allow update: if isEmailVerified() && isResourceOwner();
      allow delete: if isEmailVerified() && isResourceOwner();
    }
    
    // ユーザー設定
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // 通知
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     resource != null && 
                     resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                       resource != null && 
                       resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                       resource != null && 
                       resource.data.userId == request.auth.uid;
    }
    
    // フィードバック
    match /feedbacks/{feedbackId} {
      // 読み取り: 認証済みユーザーは自分のデータを閲覧可能
      allow read: if isResourceOwner();
      // 作成・更新・削除: メール認証済みユーザーのみ
      allow create: if isEmailVerified() && 
                       isNewResourceOwner() &&
                       isValidString(request.resource.data.message, 1, 1000);
      allow update: if isEmailVerified() && isResourceOwner();
      allow delete: if isEmailVerified() && isResourceOwner();
    }
    
    // === 公開コンテンツ ===
    
    // システム設定（読み取り専用）
    match /systemSettings/{document} {
      allow read: if true;
      allow write: if false;
    }
    
    // アプリバージョン情報（読み取り専用）
    match /appVersions/{versionId} {
      allow read: if true;
      allow write: if false;
    }
    
    // 記事・ニュース（読み取り専用）
    match /articles/{articleId} {
      allow read: if true;
      allow write: if false;
    }
    
    match /news/{newsId} {
      allow read: if true;
      allow write: if false;
    }
    
    // 練習場所・施設情報（認証済みユーザーのみ閲覧）
    match /venues/{venueId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    
    // === 管理者専用 ===
    
    // アプリ使用統計
    match /analytics/{document} {
      allow create: if isAuthenticated();
      allow read, update, delete: if false;
    }
    
    // レポート
    match /reports/{reportId} {
      allow create: if isAuthenticated() &&
                       isValidString(request.resource.data.reason, 1, 200);
      allow read, update, delete: if false;
    }
    
    // === コミュニティ機能 ===
    
    // コミュニティ
    match /communities/{communityId} {
      // 読み取り: 認証済みユーザーは全て閲覧可能
      allow read: if isAuthenticated();
      
      // 作成: 認証済みユーザーなら誰でも作成可能
      allow create: if isAuthenticated() && 
                       request.resource.data.ownerId == request.auth.uid;
      
      // 更新: オーナーまたは管理者
      allow update: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        exists(/databases/$(database)/documents/community_members/$(request.auth.uid + '_' + communityId))
      );
      
      // 削除: オーナーのみ
      allow delete: if isAuthenticated() && 
                       resource.data.ownerId == request.auth.uid;
      
      // サブコレクション: イベント - 完全開放（開発用）
      match /events/{eventId} {
        // すべての操作を許可
        allow read, write: if true;
      }
    }
    
    // コミュニティメンバー
    match /community_members/{memberId} {
      // 読み取り: 認証済みユーザー
      allow read: if isAuthenticated();
      
      // 作成: 認証済みユーザー（招待時）
      allow create: if isAuthenticated();
      
      // 更新: メンバー本人またはコミュニティオーナー/管理者
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        exists(/databases/$(database)/documents/communities/$(resource.data.communityId))
      );
      
      // 削除: メンバー本人またはコミュニティオーナー
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        exists(/databases/$(database)/documents/communities/$(resource.data.communityId))
      );
    }
    
    // コミュニティ招待
    match /community_invitations/{invitationId} {
      // 読み取り: 認証済みユーザーなら誰でも（クエリ用に緩和）
      // 実際のデータはクライアント側でフィルタリング
      allow read: if isAuthenticated();
      
      // 作成: 認証済みユーザーで招待者が自分
      allow create: if isAuthenticated() && 
                       request.resource.data.inviterId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['communityId', 'inviterId', 'invitedUserId', 'status', 'invitedAt']);
      
      // 更新: 被招待者（承認/拒否）または招待者（キャンセル）
      allow update: if isAuthenticated() && (
        resource.data.invitedUserId == request.auth.uid ||
        resource.data.inviterId == request.auth.uid
      );
      
      // 削除: 招待者または被招待者
      allow delete: if isAuthenticated() && (
        resource.data.inviterId == request.auth.uid ||
        resource.data.invitedUserId == request.auth.uid
      );
    }
    
    // コミュニティイベント - 完全開放（開発用）
    match /community_events/{eventId} {
      // すべての操作を許可
      allow read, write: if true;
    }
    
    // イベント参加情報 - 完全開放（開発用）
    match /event_participants/{participantId} {
      // すべての操作を許可
      allow read, write: if true;
    }
    
    // イベント関連のすべてのパス - 完全開放（開発用）
    match /events/{document=**} {
      // すべての操作を許可
      allow read, write: if true;
    }
    
    // === フォールバック ===
    // 明示的に定義されていないパスへのアクセスを拒否
    match /{document=**} {
      allow read, write: if false;
    }
    */
  }
}